// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WatcherServiceClient is the client API for WatcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatcherServiceClient interface {
	StartWatching(ctx context.Context, in *StartWatchingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetChanges(ctx context.Context, in *GetChangesRequest, opts ...grpc.CallOption) (*GetChangesResponse, error)
}

type watcherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatcherServiceClient(cc grpc.ClientConnInterface) WatcherServiceClient {
	return &watcherServiceClient{cc}
}

func (c *watcherServiceClient) StartWatching(ctx context.Context, in *StartWatchingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.WatcherService/StartWatching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watcherServiceClient) GetChanges(ctx context.Context, in *GetChangesRequest, opts ...grpc.CallOption) (*GetChangesResponse, error) {
	out := new(GetChangesResponse)
	err := c.cc.Invoke(ctx, "/pb.WatcherService/GetChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatcherServiceServer is the server API for WatcherService service.
// All implementations must embed UnimplementedWatcherServiceServer
// for forward compatibility
type WatcherServiceServer interface {
	StartWatching(context.Context, *StartWatchingRequest) (*empty.Empty, error)
	GetChanges(context.Context, *GetChangesRequest) (*GetChangesResponse, error)
	mustEmbedUnimplementedWatcherServiceServer()
}

// UnimplementedWatcherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWatcherServiceServer struct {
}

func (UnimplementedWatcherServiceServer) StartWatching(context.Context, *StartWatchingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWatching not implemented")
}
func (UnimplementedWatcherServiceServer) GetChanges(context.Context, *GetChangesRequest) (*GetChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChanges not implemented")
}
func (UnimplementedWatcherServiceServer) mustEmbedUnimplementedWatcherServiceServer() {}

// UnsafeWatcherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatcherServiceServer will
// result in compilation errors.
type UnsafeWatcherServiceServer interface {
	mustEmbedUnimplementedWatcherServiceServer()
}

func RegisterWatcherServiceServer(s grpc.ServiceRegistrar, srv WatcherServiceServer) {
	s.RegisterService(&WatcherService_ServiceDesc, srv)
}

func _WatcherService_StartWatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherServiceServer).StartWatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WatcherService/StartWatching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherServiceServer).StartWatching(ctx, req.(*StartWatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatcherService_GetChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatcherServiceServer).GetChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WatcherService/GetChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatcherServiceServer).GetChanges(ctx, req.(*GetChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WatcherService_ServiceDesc is the grpc.ServiceDesc for WatcherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatcherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WatcherService",
	HandlerType: (*WatcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartWatching",
			Handler:    _WatcherService_StartWatching_Handler,
		},
		{
			MethodName: "GetChanges",
			Handler:    _WatcherService_GetChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/watcher.proto",
}
